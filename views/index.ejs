<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>S·∫£n ph·∫©m</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6">Danh s√°ch s·∫£n ph·∫©m</h1>
    <form class="mb-8 flex flex-col sm:flex-row items-center gap-3" method="get" action="/">
      <input type="text" name="q" value="<%= keyword %>" placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..." class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400" />
      <button type="submit" class="px-6 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition">T√¨m ki·∫øm</button>
    </form>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      <% products.forEach((product, idx) => { %>
        <div class="bg-white p-4 rounded-xl shadow flex flex-col items-center cursor-pointer hover:shadow-lg transition" onclick="openModal(<%= idx %>)">
          <div class="relative w-32 h-32 mb-2">
            <img src="<%= product.main_image %>" class="w-32 h-32 object-cover rounded" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
            <div class="w-32 h-32 bg-gray-200 rounded flex items-center justify-center text-gray-500 text-xs" style="display:none;">Kh√¥ng c√≥ ·∫£nh</div>
          </div>
          <h2 class="font-semibold text-lg text-center mb-1"><%= product.name_en %></h2>
          <p class="text-sm text-green-600 text-center">UK: $<%= product.uk_price %> | US: $<%= product.us_price %></p>
        </div>
      <% }) %>
    </div>
    <% if (pages > 1) { %>
      <div class="mt-10 flex justify-center items-center gap-1 select-none">
        <% // N√∫t v·ªÅ ƒë·∫ßu %>
        <a href="/?page=1&q=<%= keyword %>" class="px-3 py-1 rounded border bg-white text-gray-700 hover:bg-gray-100 <%= page === 1 ? 'opacity-50 pointer-events-none' : '' %>">&laquo;&laquo;</a>
        <% // N√∫t l√πi %>
        <a href="/?page=<%= page - 1 %>&q=<%= keyword %>" class="px-3 py-1 rounded border bg-white text-gray-700 hover:bg-gray-100 <%= page === 1 ? 'opacity-50 pointer-events-none' : '' %>">&laquo;</a>
        <% let start = Math.max(1, page - 2); %>
        <% let end = Math.min(pages, page + 2); %>
        <% if (start > 1) { %>
          <span class="px-2">...</span>
        <% } %>
        <% for (let i = start; i <= end; i++) { %>
          <a href="/?page=<%= i %>&q=<%= keyword %>" class="px-3 py-1 rounded border transition <%= i === page ? 'bg-blue-500 text-white border-blue-500 font-bold' : 'bg-white text-gray-700 hover:bg-gray-100' %>"><%= i %></a>
        <% } %>
        <% if (end < pages) { %>
          <span class="px-2">...</span>
        <% } %>
        <% // N√∫t ti·∫øn %>
        <a href="/?page=<%= page + 1 %>&q=<%= keyword %>" class="px-3 py-1 rounded border bg-white text-gray-700 hover:bg-gray-100 <%= page === pages ? 'opacity-50 pointer-events-none' : '' %>">&raquo;</a>
        <% // N√∫t v·ªÅ cu·ªëi %>
        <a href="/?page=<%= pages %>&q=<%= keyword %>" class="px-3 py-1 rounded border bg-white text-gray-700 hover:bg-gray-100 <%= page === pages ? 'opacity-50 pointer-events-none' : '' %>">&raquo;&raquo;</a>
      </div>
    <% } %>

    <!-- Modal -->
    <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
      <div class="bg-white rounded-lg shadow-lg w-[90vw] max-w-5xl max-h-[90vh] p-6 relative flex flex-col">
        <button onclick="closeModal()" class="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-3xl leading-none">&times;</button>
        <div id="modalContent" class="flex-1 flex flex-col items-center justify-center">
          <div id="modalLoader" class="flex flex-col items-center justify-center">
            <svg class="animate-spin h-8 w-8 text-blue-600 mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v8z"></path></svg>
            <span>ƒêang t·∫£i...</span>
          </div>
          <div id="modalDetail" class="hidden w-full overflow-auto" style="max-height:60vh;"></div>
        </div>
      </div>
    </div>

    <script>
      const products = <%- JSON.stringify(products) %>;
      
      // H√†m ki·ªÉm tra h√¨nh ·∫£nh c√≥ load ƒë∆∞·ª£c kh√¥ng
      function checkImageLoad(img) {
        return new Promise((resolve) => {
          const testImg = new Image();
          testImg.onload = () => resolve(true);
          testImg.onerror = () => resolve(false);
          testImg.src = img.src;
        });
      }
      
      // H√†m ·∫©n h√¨nh ·∫£nh b·ªã l·ªói
      function hideBrokenImage(img) {
        img.style.display = 'none';
        // N·∫øu l√† h√¨nh ·∫£nh trong grid s·∫£n ph·∫©m, thay b·∫±ng placeholder
        if (img.closest('.grid')) {
          const placeholder = document.createElement('div');
          placeholder.className = 'w-32 h-32 bg-gray-200 rounded flex items-center justify-center text-gray-500 text-xs';
          placeholder.innerHTML = 'Kh√¥ng c√≥ ·∫£nh';
          img.parentNode.replaceChild(placeholder, img);
        }
      }
      
      // Ki·ªÉm tra t·∫•t c·∫£ h√¨nh ·∫£nh khi trang load
      window.addEventListener('load', async () => {
        const allImages = document.querySelectorAll('img');
        for (const img of allImages) {
          const isLoaded = await checkImageLoad(img);
          if (!isLoaded) {
            hideBrokenImage(img);
          }
        }
      });
      
      function openModal(idx) {
        const goods_code = products[idx].goods_code;
        document.getElementById('productModal').classList.remove('hidden');
        document.getElementById('modalLoader').classList.remove('hidden');
        document.getElementById('modalDetail').classList.add('hidden');
        fetch(`/detail/${goods_code}`)
          .then(res => res.json())
          .then(product => {
            let imagesHtml = '';
            if (product.images && product.images.length) {
              imagesHtml = '<div class="flex gap-2 mb-4 overflow-x-auto">' +
                product.images.map(url => 
                  `<div class="relative">
                    <img src="${url}" class="h-28 rounded shadow" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';" />
                    <div class="h-28 w-28 bg-gray-200 rounded shadow flex items-center justify-center text-gray-500 text-xs" style="display:none;">L·ªói ·∫£nh</div>
                   </div>`
                ).join('') +
                '</div>';
            }
            let variantsHtml = '';
            if (product.variants && product.variants.length) {
              variantsHtml = '<div class="mb-4"><b>Bi·∫øn th·ªÉ:</b> <ul class="list-disc list-inside">' +
                product.variants.map(v => '<li>' + v.spec_name + ': ' + v.spec_value + '</li>').join('') +
                '</ul></div>';
            }
            document.getElementById('modalDetail').innerHTML = 
              '<div class="flex justify-between items-center mb-2">' +
                '<h2 class="font-semibold text-2xl text-center flex-1">' + product.name_en + '</h2>' +
                '<div class="flex gap-2">' +
                  '<button onclick="downloadAllImagesAsJpg(\'' + product.goods_code + '\')" class="px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700" title="T·∫£i t·∫•t c·∫£ ·∫£nh d∆∞·ªõi d·∫°ng JPG (zip)">T·∫£i JPG</button>' +
                  '<button onclick="downloadAllImages(\'' + product.goods_code + '\')" class="px-3 py-1 bg-blue-600 text-white rounded hover:bg-blue-700" title="T·∫£i t·∫•t c·∫£ ·∫£nh g·ªëc (zip)">T·∫£i g·ªëc</button>' +
                '</div>' +
              '</div>' +
              '<div class="flex items-center gap-2 mb-4">' +
                '<span><b>goods_code:</b> <span id="goods_code_text">' + product.goods_code + '</span></span>' +
                '<button onclick="copyText(\'goods_code_text\')" class="ml-1 px-2 py-1 bg-gray-200 rounded hover:bg-gray-300" title="Copy">üìã</button>' +
              '</div>' +
              imagesHtml +
              '<div class="mb-4 flex items-center gap-2"><b>Gi√°:</b>' +
                '<span id="uk_price_text">UK: $' + product.uk_price + '</span>' +
                '<button onclick="copyText(\'uk_price_text\')" class="ml-1 px-2 py-1 bg-gray-200 rounded hover:bg-gray-300" title="Copy">üìã</button>' +
                '<span id="us_price_text">| US: $' + product.us_price + '</span>' +
                '<button onclick="copyText(\'us_price_text\')" class="ml-1 px-2 py-1 bg-gray-200 rounded hover:bg-gray-300" title="Copy">üìã</button>' +
                '<span id="channel_price_text">| Channel: $' + product.channel_price + '</span>' +
                '<button onclick="copyText(\'channel_price_text\')" class="ml-1 px-2 py-1 bg-gray-200 rounded hover:bg-gray-300" title="Copy">üìã</button>' +
              '</div>' +
              variantsHtml +
              '<div class="prose max-w-none" id="desc_html">' + (product.description_en || '') + '</div>';
            // Th√™m n√∫t t·∫£i xu·ªëng cho t·ª´ng ·∫£nh (ch·ªâ cho ·∫£nh load ƒë∆∞·ª£c)
            document.querySelectorAll('#modalDetail img').forEach(img => {
              // Ki·ªÉm tra ·∫£nh c√≥ load ƒë∆∞·ª£c kh√¥ng tr∆∞·ªõc khi th√™m n√∫t download
              checkImageLoad(img).then(isLoaded => {
                if (isLoaded) {
                  const url = img.src;
                  const container = document.createElement('div');
                  container.className = 'flex gap-1 mt-1';
                  
                  // N√∫t t·∫£i ·∫£nh g·ªëc
                  const btnOriginal = document.createElement('a');
                  btnOriginal.href = url;
                  btnOriginal.download = '';
                  btnOriginal.className = 'px-2 py-1 bg-blue-600 text-white rounded hover:bg-blue-700 text-xs';
                  btnOriginal.innerText = 'T·∫£i g·ªëc';
                  btnOriginal.title = 'T·∫£i ·∫£nh g·ªëc';
                  
                  // N√∫t t·∫£i ·∫£nh JPG
                  const btnJpg = document.createElement('button');
                  btnJpg.className = 'px-2 py-1 bg-green-600 text-white rounded hover:bg-green-700 text-xs';
                  btnJpg.innerText = 'T·∫£i JPG';
                  btnJpg.title = 'T·∫£i ·∫£nh d∆∞·ªõi d·∫°ng JPG';
                  btnJpg.onclick = () => downloadSingleImageAsJpg(url);
                  
                  container.appendChild(btnOriginal);
                  container.appendChild(btnJpg);
                  img.parentNode.insertBefore(container, img.nextSibling);
                }
              });
            });
            document.getElementById('modalLoader').classList.add('hidden');
            document.getElementById('modalDetail').classList.remove('hidden');
          })
          .catch(() => {
            document.getElementById('modalDetail').innerHTML = '<div class="text-red-600">Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin s·∫£n ph·∫©m.</div>';
            document.getElementById('modalLoader').classList.add('hidden');
            document.getElementById('modalDetail').classList.remove('hidden');
          });
      }
      function closeModal() {
        document.getElementById('productModal').classList.add('hidden');
      }
      // ƒê√≥ng modal khi click ra ngo√†i
      document.getElementById('productModal').addEventListener('click', function(e) {
        if (e.target === this) closeModal();
      });
      function copyText(id) {
        const el = document.getElementById(id);
        if (!el) return;
        const text = el.innerText || el.textContent;
        navigator.clipboard.writeText(text);
      }
      async function downloadAllImages(goods_code) {
        // L·∫•y t·∫•t c·∫£ ·∫£nh trong modal v√† ki·ªÉm tra t·ª´ng ·∫£nh
        const imgElements = Array.from(document.querySelectorAll('#modalDetail img'));
        const validImages = [];
        
        // Ki·ªÉm tra t·ª´ng ·∫£nh c√≥ load ƒë∆∞·ª£c kh√¥ng
        for (const img of imgElements) {
          const isLoaded = await checkImageLoad(img);
          if (isLoaded) {
            validImages.push(img.src);
          }
        }
        
        if (!validImages.length) return alert('Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá ƒë·ªÉ t·∫£i!');
        
        // T·∫£i t·ª´ng ·∫£nh v·ªÅ blob
        const JSZip = window.JSZip;
        if (!JSZip) {
          alert('ƒêang t·∫£i th∆∞ vi·ªán n√©n, vui l√≤ng th·ª≠ l·∫°i sau!');
          return;
        }
        const zip = new JSZip();
        let count = 0;
        for (const url of validImages) {
          try {
            const res = await fetch(url);
            const blob = await res.blob();
            const name = url.split('/').pop().split('?')[0];
            zip.file(name, blob);
            count++;
          } catch {}
        }
        if (count === 0) return alert('Kh√¥ng th·ªÉ t·∫£i ·∫£nh!');
        const content = await zip.generateAsync({type:'blob'});
        const a = document.createElement('a');
        a.href = URL.createObjectURL(content);
        a.download = goods_code + '_images.zip';
        a.click();
      }

      async function downloadAllImagesAsJpg(goods_code) {
        // L·∫•y t·∫•t c·∫£ ·∫£nh trong modal v√† ki·ªÉm tra t·ª´ng ·∫£nh
        const imgElements = Array.from(document.querySelectorAll('#modalDetail img'));
        const validImages = [];
        
        // Ki·ªÉm tra t·ª´ng ·∫£nh c√≥ load ƒë∆∞·ª£c kh√¥ng
        for (const img of imgElements) {
          const isLoaded = await checkImageLoad(img);
          if (isLoaded) {
            validImages.push(img.src);
          }
        }
        
        if (!validImages.length) return alert('Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá ƒë·ªÉ t·∫£i!');
        
        try {
          const response = await fetch('/download/images-as-jpg', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              goods_code: goods_code,
              imageUrls: validImages
            })
          });

          if (!response.ok) {
            throw new Error('L·ªói server');
          }

          const blob = await response.blob();
          const a = document.createElement('a');
          a.href = URL.createObjectURL(blob);
          a.download = goods_code + '_images_jpg.zip';
          a.click();
        } catch (error) {
          console.error('L·ªói khi t·∫£i ·∫£nh JPG:', error);
          alert('L·ªói khi t·∫£i ·∫£nh JPG. Vui l√≤ng th·ª≠ l·∫°i!');
        }
      }

      async function downloadSingleImageAsJpg(imageUrl) {
        try {
          const response = await fetch('/download/single-image-as-jpg', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              imageUrl: imageUrl
            })
          });

          if (!response.ok) {
            throw new Error('L·ªói server');
          }

          const blob = await response.blob();
          const a = document.createElement('a');
          a.href = URL.createObjectURL(blob);
          
          // T·∫°o t√™n file t·ª´ URL
          const urlParts = imageUrl.split('/');
          const originalName = urlParts[urlParts.length - 1].split('?')[0];
          const nameWithoutExt = originalName.substring(0, originalName.lastIndexOf('.'));
          a.download = nameWithoutExt + '.jpg';
          
          a.click();
        } catch (error) {
          console.error('L·ªói khi t·∫£i ·∫£nh JPG:', error);
          alert('L·ªói khi t·∫£i ·∫£nh JPG. Vui l√≤ng th·ª≠ l·∫°i!');
        }
      }
    </script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
  </div>
</body>
</html>
